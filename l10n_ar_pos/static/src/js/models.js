odoo.define('l10n_ar_pos.models', function (require) {
"use strict";

    var models = require('point_of_sale.models');

    models.load_fields('res.partner', ['l10n_latam_identification_type_id', 'l10n_ar_afip_responsibility_type_id']);

    models.load_models([
        {
            model: 'l10n_latam.identification.type',
            label: "AFIP Identification Types",
            fields: ['id', 'name'],
            loaded: function (self, category_id) {
                self.category_id = [];
                for (var i in category_id){
                    self.category_id.push(category_id[i]);
                }
            },
        },
        {
            model: 'l10n_ar.afip.responsibility.type',
            label: "AFIP Responsibility Types",
            fields: ['id', 'name'],
            loaded: function (self, responsibility_type) {
                self.responsibility_type = [];
                for (var i in responsibility_type){
                    self.responsibility_type.push(responsibility_type[i]);
                }
            },
        },
    ]);

    var _super_order = models.Order.prototype;
    models.Order = models.Order.extend({
        initialize: function (attributes, options) {
            _super_order.initialize.apply(this, arguments);
            if (this.pos.config.pos_auto_invoice) {
                this.to_invoice = true;
            }
        },
        init_from_JSON: function (json) {
            var res = _super_order.init_from_JSON.apply(this, arguments);
            if (json.to_invoice) {
                this.to_invoice = json.to_invoice;
            }
        }
    });
    // Este metodo es el mas importante para habilitar los campos que se necesitan usar
    // por ejemplo "vat" fue sustituido por main_id_number
    // En v13 se saca main_id_number y se empieza a usar vat

    // esto quiere decir que agregamos funcionalidad (EXTEND)
    // a traves de la var models

    var _super_posmodel = models.PosModel.prototype;
    models.PosModel = models.PosModel.extend({
        initialize: function (session, attributes) {
            var partner_model = _.find(this.models, function (model) {
                return model.model === 'res.partner';
            });

            partner_model.fields.push('vat');
            partner_model.fields.push('website');
            partner_model.fields.push('l10n_ar_afip_responsibility_type_id');

            _super_posmodel.initialize.apply(this, arguments);

        },

        push_and_invoice_order: function (order) {
            var self = this;
            var invoiced = new Promise(function (resolveInvoiced, rejectInvoiced) {
                if(!order.get_client()){
                    rejectInvoiced({code:400, message:'Missing Customer', data:{}});
                }
                else {
                    var order_id = self.db.add_order(order.export_as_JSON());
                    self.flush_mutex.exec(function () {
                        var done =  new Promise(function (resolveDone, rejectDone) {
                            // send the order to the server
                            // we have a 30 seconds timeout on this push.
                            // FIXME: if the server takes more than 30 seconds to accept the order,
                            // the client will believe it wasn't successfully sent, and very bad
                            // things will happen as a duplicate will be sent next time
                            // so we must make sure the server detects and ignores duplicated orders

                            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                            transfer.catch(function (error) {
                                rejectInvoiced(error);
                                rejectDone();
                            });

                            // on success, get the order id generated by the server
                            transfer.then(function(order_server_id){
                                // generate the pdf and download it
                                if (order_server_id.length && !order.is_to_email()) {
                                    debugger;
                                    self.chrome.do_action('point_of_sale.pos_invoice_report',{additional_context:{
                                        active_ids:order_server_id,
                                    }}).then(function () {
                                        resolveInvoiced(order_server_id);
                                        resolveDone();
                                    }).guardedCatch(function (error) {
                                        rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                        rejectDone();
                                    });
                                } else if (order_server_id.length) {
                                    resolveInvoiced(order_server_id);
                                    resolveDone();
                                } else {
                                    // The order has been pushed separately in batch when
                                    // the connection came back.
                                    // The user has to go to the backend to print the invoice
                                    rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                    rejectDone();
                                }
                            });
                            return done;
                        });
                    });
                }
            });

            return invoiced;
        },

    });

});
